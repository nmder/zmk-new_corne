#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt { flavor = "balanced"; };

&lt { flavor = "balanced"; };

/ {
    behaviors {
        rsft_bspc: rsft_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "RSFT_BSPC";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        lsft_bspc: lsft_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "LSFT_BSPC";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lt_lsft_bspc: lt_lsft_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "LT_LSFT_BSPC";
            bindings = <&lt 1 BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&mt RA(RSHFT) TAB>;
            key-positions = <25 24>;
            timeout-ms = <40>;
            layers = <0>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <8 7>;
            timeout-ms = <20>;
            layers = <0>;
        };

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <9 8>;
            timeout-ms = <20>;
            layers = <0>;
        };

        lpar {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <23 22>;
            timeout-ms = <20>;
            layers = <0>;
        };

        rpar {
            bindings = <&mt RG(RALT) RPAR>;
            key-positions = <23 24>;
            timeout-ms = <20>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <37 38>;
            timeout-ms = <20>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <38 39>;
            timeout-ms = <20>;
            layers = <0>;
        };

        undersc {
            bindings = <&mt LS(LALT) UNDER>;
            key-positions = <15 16>;
            timeout-ms = <40>;
            layers = <0>;
        };

        equal {
            bindings = <&mt LA(LGUI) EQUAL>;
            key-positions = <16 17>;
            timeout-ms = <40>;
            layers = <0>;
        };

        carat {
            bindings = <&kp CARET>;
            key-positions = <17 3>;
            timeout-ms = <20>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DLLR>;
            key-positions = <23 9>;
            timeout-ms = <20>;
            layers = <0>;
        };

        star {
            bindings = <&kp ASTERISK>;
            key-positions = <37 24>;
            timeout-ms = <20>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB     &kp Q        &kp W        &kp E       &kp R       &kp T                               &kp UP                &kp Y        &kp U          &kp I       &kp O         &kp P           &kp BSPC
&lt 1 ESC   &mt LCTRL A  &mt LSHFT S  &mt LALT D  &mt LGUI F  &kp G                     &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &mt RGUI J     &mt RALT K  &mt RSHIFT L  &mt RCTRL SEMI  &lt 1 ENTER
&rsft_bspc  &kp Z        &kp X        &kp C       &kp V       &kp B        &kp SPACE              &kp DOWN              &kp N        &kp M          &kp COMMA   &kp PERIOD    &kp SLASH       &kp DEL
                                      &kp LGUI    &lt 1 ESC   &lt 2 SPACE                                               &lt 2 SPACE  &lt_lsft_bspc  &lt 3 CAPS
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &kp N1              &kp N2          &kp N3       &kp N4       &kp N5                                         &mmv MOVE_UP                     &kp N6                &kp N7             &kp N8           &kp N9           &kp N0               &kp DEL
&trans  &mt LCTRL NUMBER_6  &mt LSHFT N7    &mt LALT N8  &mt LGUI N9  &kp N0                         &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT_PARENTHESIS  &mt RGUI LBRC      &mt RALT RBRC    &mt RSHIFT RPAR  &mt RCTRL BACKSPACE  &trans
&trans  &rgb_ug RGB_OFF     &rgb_ug RGB_ON  &kp BSPC     &kp DOT      &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &kp END              &kp PG_DN
                                            &trans       &trans       &trans                                                                          &kp INS               &kp DEL            &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&kp C_VOL_UP       &kp EXCL      &kp UNDERSCORE    &kp EQUAL     &kp GRAVE      &kp TILDE                            &mmv MOVE_UP                     &kp ASTERISK    &kp CARET       &kp DLLR      &kp PRCNT  &kp PLUS       &trans
&kp C_VOLUME_DOWN  &mt LCTRL AT  &mt LSHFT AMPS    &mt LALT SQT  &mt LGUI DQT   &kp AT               &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &lsft_bspc     &trans
&kp DELETE         &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &kp BACKSLASH  &kp PIPE   &trans                    &mmv MOVE_DOWN                   &kp ENTER       &kp MINUS       &kp HASH      &kp TAB    &kp BACKSLASH  &trans
                                                   &kp LCTRL     &kp LSHIFT     &kp SPACE                                                             &kp RET         &kp DEL         &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1   &kp F2   &kp F3       &kp F4      &kp F5                                         &mmv MOVE_UP                     &bt BT_CLR_ALL   &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3    &bt BT_SEL 4
&trans          &kp F6   &kp F7   &kp F8       &kp F9      &kp F10                        &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader      &mkp LCLK        &mkp MCLK        &mkp RCLK        &out OUT_BLE    &out OUT_USB
&trans          &kp F11  &kp F12  &bootloader  &sys_reset  &mkp MB5         &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp SCROLLLOCK  &kp PAUSE_BREAK
                                  &trans       &trans      &kp PRINTSCREEN                                                                 &trans           &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
